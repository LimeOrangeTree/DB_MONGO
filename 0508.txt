db.order.insert({
cust_id : "A2012001",
order_date : new Date("2017,10,01"),
status : "A",
price : 250,
items : [ {item_name : "Bunny Boots", qty : 5, price : 25},
		{item_name : "Sky Pole", qty : 5, price : 25}]
})

db.order.insert({
cust_id : "A2012002",
order_date : new Date("2017,10,12"),
status : "B",

price : 375,

items : [ {item_name : "Bunny Boots", qty : 10, price : 25},

{item_name : "white shirt", qty : 5, price : 25}]

})
db.order.insert({
cust_id : "A2012001",

order_date : new Date("2017,11,15"),

status : "A",

price : 500,

items : [ {item_name : "Bunny Boots", qty : 15, price : 25},

{item_name : "Sky Pole", qty : 5, price : 25}]

})

  

db.order.insert({
	cust_id : "A2012001",
	order_date : new Date("2017,11,21"),
	status : "B",
	price : 500,
	items : [ {item_name : "Bunny Boots", qty : 15, price : 25},
			  {item_name : "Sky Pole", qty : 5, price : 25}]
})
db.order.find({});
//map함수 :초기 데이터를 가져오는 함수
var mapf1=function(){
	//emit(key,value)
	emit(this.cust_id,this.price)
}
//reduce 함수:가져온 데이터를 가공
var reducef1=function(key,value){
	return Array.sum(value)
}
db.order.mapReduce(
	mapf1,
	reducef1,
	{out:"orderCustPrice"}
)
db.orderCustPrice.find()
===주문항목별 주문수량합계
var mapf2=function(){
	for(var i=0;i<this.items.length;i++){
		key=this.items[i].item_name;
		value={count:1,	qty:this.items[i].qty}
		emit(key,value);		
	}
}

var reducef2=function(key,value){
	temp={count:0,qty:0}
	for(i=0;i<value.lenth;i++){
		temp.count=temp.count+value[i].count
		temp.qty=temp.qty+value[i].qty
	}
	return temp
}

/*
db.order.mapReduce(
	mapf2,
	reducef2,
	{out:"map2"}
)
db.map2.find()
*/

var ff2=function(key,value){
	value.avg=value.qty/value.count
	return value
}
db.order.mapReduce(
	mapf2,
	reducef2,
	{out:"map3",
	finalize:ff2
	}
)
db.map3.find()






